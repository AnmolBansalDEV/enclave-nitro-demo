name: AWS Nitro enclave deployment
on: [push]
permissions:
  contents: write
  packages: write
  id-token: write
jobs:
  build_and_push_enclave:
    name: Build and Push Enclave
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and export EIF
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile  # Assuming your Dockerfile is in the root directory
          target: package
          outputs: type=local,dest=./artifact

      - name: Setup oras
        uses: oras-project/setup-oras@ee7dbe1144cb00080a89497f937dae78f85fce29 # oras-project/setup-oras@v1.1.0
        with:
          version: 1.1.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::717279690196:role/enclave
          aws-region: us-east-2

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Push file to ECR
        id: push-file
        shell: bash
        env:
          EIF_FILE_NAME: nitro.eif
          EIF_INFO_FILE_NAME: nitro.pcrs
          ARTIFACT_TAG: ${{ github.sha }}
          ECR_REPO_URI: ${{ secrets.ECR_REPO_URI }}
        run: |
          WORKDIR="${{ github.workspace }}/artifact-push/"
          
          mkdir -p ${WORKDIR}
          cd ${WORKDIR}
          
          cp "${{ github.workspace }}/artifact/${EIF_FILE_NAME}" "${WORKDIR}/${EIF_FILE_NAME}"
          cp "${{ github.workspace }}/artifact/${EIF_INFO_FILE_NAME}" "${WORKDIR}/${EIF_INFO_FILE_NAME}"
          
          mkdir tmp/
          
          PCR0=$(cat ${WORKDIR}/${EIF_INFO_FILE_NAME} | grep PCR0 | cut -d' ' -f2)
          PCR1=$(cat ${WORKDIR}/${EIF_INFO_FILE_NAME} | grep PCR1 | cut -d' ' -f2)
          PCR2=$(cat ${WORKDIR}/${EIF_INFO_FILE_NAME} | grep PCR2 | cut -d' ' -f2)
          
          oras push \
            --export-manifest tmp/manifest.json \
            --annotation "PCR0=${PCR0}" \
            --annotation "PCR1=${PCR1}" \
            --annotation "PCR2=${PCR2}" \
            "${ECR_REPO_URI}:${ARTIFACT_TAG}" \
            "${EIF_FILE_NAME}" \
            "${EIF_INFO_FILE_NAME}"
          
          DIGEST=$(sha256sum tmp/manifest.json | cut -d " " -f 1)
          
          echo "digest=${DIGEST}" >> "${GITHUB_OUTPUT}"
          echo "path=${ECR_REPO_URI}:${ARTIFACT_TAG}@sha256:${DIGEST}" >> "${GITHUB_OUTPUT}"
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        env:
          EIF_ARTIFACT_PATH: ${{ steps.push-file.outputs.path }}
        run: |
          cd terraform
          TF_LOG=DEBUG terraform plan -var "eif_artifact_path=${EIF_ARTIFACT_PATH}" -out=tfplan
  
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
